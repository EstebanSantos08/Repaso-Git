{"cells":[{"cell_type":"markdown","id":"8fd99adc42d87cf2","metadata":{"id":"8fd99adc42d87cf2"},"source":["# Práctica Semana 2: Proceso ETL - Transformación (con Variables de Entorno)\n","\n","**Grupo:** G5\n","\n","**Integrantes**\n","\n","**LUZ YAMILETH MOLLOCANO**\n","\n","**WILLIAM DAVID HIDALGO**\n","\n","**JUAN CARLOS PARDO**\n","\n","\n","## Introducción\n","Este notebook realiza la etapa de **Transformación (T)** de un proceso ETL, siguiendo las mejores prácticas de seguridad al usar **variables de entorno** para las credenciales de la base de datos.\n","\n","**Objetivos específicos:**  \n","- Aplicar técnicas de limpieza y transformación de datos.  \n","- Elaborar representaciones gráficas que faciliten la interpretación.  \n","- Generar conclusiones basadas en evidencia estadística.\n","\n"]},{"cell_type":"code","execution_count":null,"id":"ca522f81c8fa9a7b","metadata":{"ExecuteTime":{"end_time":"2025-10-27T02:31:59.290738Z","start_time":"2025-10-27T02:31:57.118746Z"},"id":"ca522f81c8fa9a7b","outputId":"321b2342-2739-42a8-eaac-40c46aea7634"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: pandas in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (2.3.3)\n","Requirement already satisfied: sqlalchemy in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (2.0.44)\n","Requirement already satisfied: psycopg2-binary in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (2.9.11)\n","Requirement already satisfied: python-dotenv in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (1.1.1)\n","Requirement already satisfied: numpy>=1.26.0 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from pandas) (2.3.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from pandas) (2025.2)\n","Requirement already satisfied: greenlet>=1 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from sqlalchemy) (3.2.4)\n","Requirement already satisfied: typing-extensions>=4.6.0 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from sqlalchemy) (4.15.0)\n","Requirement already satisfied: six>=1.5 in c:\\users\\user\\dataspellprojects\\practica_g5\\.venv\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Note: you may need to restart the kernel to use updated packages.\n","Librerías instaladas.\n"]},{"name":"stderr","output_type":"stream","text":["\n","[notice] A new release of pip is available: 25.1.1 -> 25.3\n","[notice] To update, run: python.exe -m pip install --upgrade pip\n"]}],"source":["# --- 0. Instalar las librerías necesarias ---\n","# sqlalchemy: para conectar pandas con SQL\n","# psycopg2-binary: driver de Python para Postgres\n","# python-dotenv: para cargar variables de entorno desde un archivo .env\n","%pip install pandas sqlalchemy psycopg2-binary python-dotenv\n","\n","print(\"Librerías instaladas.\")"]},{"cell_type":"markdown","id":"1f5d541c4f7a0481","metadata":{"id":"1f5d541c4f7a0481"},"source":["## Fase 1: Configuración y Carga Segura de Datos\n","\n","Importamos las librerías, cargamos las variables de entorno desde el archivo `.env` y establecemos la conexión a la base de datos de forma segura."]},{"cell_type":"code","execution_count":3,"id":"d0ae4b3a9a26748c","metadata":{"ExecuteTime":{"end_time":"2025-10-27T02:31:59.863828Z","start_time":"2025-10-27T02:31:59.455040Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"d0ae4b3a9a26748c","executionInfo":{"status":"ok","timestamp":1761669772527,"user_tz":300,"elapsed":858,"user":{"displayName":"Juan Pardo","userId":"02803117082760634197"}},"outputId":"a5207ab3-f11a-4939-92f7-815b3d3bb27c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Variables de entorno cargadas.\n","¡ERROR! La variable de entorno 'DATABASE_URL' no está definida. 😟\n","Asegúrate de crear un archivo '.env' con DATABASE_URL='postgresql://usuario:contraseña@host:puerto/db'\n","\n","No se pudo cargar datos en Postgres porque la conexión a la BD falló o no se configuró.\n"]}],"source":["# ## Configuración inicial\n","# En esta sección se importan las librerias necesarias y se cargan los datos.\n","\n","import pandas as pd\n","from sqlalchemy import create_engine\n","import os # Librería para interactuar con el sistema operativo (leer variables de entorno)\n","from dotenv import load_dotenv # Función para cargar el archivo .env\n","\n","# --- 1. Cargar variables de entorno del archivo .env ---\n","# Busca un archivo llamado '.env' en la misma carpeta (o carpetas superiores)\n","# y carga las variables definidas en él al entorno del sistema.\n","load_dotenv()\n","print(\"Variables de entorno cargadas.\")\n","\n","# --- 2. Obtener la URL de la BD desde la variable de entorno ---\n","# os.getenv(\"VARIABLE_NAME\") busca la variable llamada \"DATABASE_URL\" en el entorno.\n","# Es más seguro que os.environ[\"VARIABLE_NAME\"] porque devuelve None si no la encuentra,\n","# en lugar de lanzar un error.\n","db_url = os.getenv(\"DATABASE_URL\")\n","engine = None # Inicializar engine como None para verificar después si se creó\n","\n","# --- 3. Validar y Crear la conexión segura a la BD ---\n","if not db_url:\n","    # Si no se encontró la variable DATABASE_URL, mostrar un error claro.\n","    print(\"¡ERROR! La variable de entorno 'DATABASE_URL' no está definida. 😟\")\n","    print(\"Asegúrate de crear un archivo '.env' con DATABASE_URL='postgresql://usuario:contraseña@host:puerto/db'\")\n","else:\n","    try:\n","        # Si db_url existe, intentar crear el 'engine' de SQLAlchemy.\n","        # Este objeto maneja la conexión con la base de datos.\n","        engine = create_engine(db_url)\n","        print(\"Conexión segura a la base de datos establecida. ✅\")\n","    except Exception as e:\n","        # Si create_engine falla (ej. contraseña incorrecta, DB no disponible),\n","        # capturar el error y mostrarlo.\n","        print(f\"Error al crear la conexión a la base de datos: {e}\")\n","        db_url = None # Invalidar db_url para evitar intentos posteriores\n","\n","# --- 4. Cargar 'ventas.csv' en Postgres (si la conexión fue exitosa) ---\n","csv_file_name = 'ventas.csv'\n","table_name = 'ventas' # Nombre que tendrá la tabla en Postgres\n","\n","# Solo intentar cargar datos si el 'engine' se creó correctamente en el paso anterior.\n","if engine:\n","    try:\n","        # Leer el archivo CSV local en un DataFrame de pandas.\n","        df_para_postgres = pd.read_csv(csv_file_name)\n","\n","        # --- Subir el DataFrame a la tabla 'ventas' ---\n","        # df.to_sql() usa el 'engine' para conectar a la BD.\n","        # - table_name: Nombre de la tabla destino en Postgres.\n","        # - engine: Objeto de conexión.\n","        # - if_exists='replace': Si la tabla ya existe, la elimina y la vuelve a crear.\n","        #   Otras opciones son 'append' (añadir datos) o 'fail' (lanzar error).\n","        # - index=False: No incluir el índice del DataFrame como una columna en la tabla SQL.\n","        df_para_postgres.to_sql(table_name, engine, if_exists='replace', index=False)\n","        print(f\"¡Éxito! Se cargó el archivo '{csv_file_name}' en la tabla '{table_name}' de Postgres. 👍\")\n","\n","    except FileNotFoundError:\n","        # Error específico si el archivo ventas.csv no está.\n","        print(f\"Error: No se encontró el archivo '{csv_file_name}'.\")\n","        print(\"Asegúrate de tenerlo en la misma carpeta que el notebook.\")\n","    except Exception as e:\n","        # Capturar cualquier otro error durante la lectura del CSV o la carga a la BD.\n","        print(f\"Ocurrió un error al cargar datos en Postgres: {e}\")\n","else:\n","     # Mensaje si no se pudo establecer la conexión a la BD en el paso 3.\n","     print(\"\\nNo se pudo cargar datos en Postgres porque la conexión a la BD falló o no se configuró.\")"]},{"cell_type":"markdown","id":"d8f09d4dd23049a1","metadata":{"id":"d8f09d4dd23049a1"},"source":["## Fase 2: Carga y Exploración Inicial de Fuentes\n","\n","Cargamos las fuentes de datos: 'ventas' desde Postgres (si la conexión fue exitosa) y el resto desde archivos CSV.\n","\n","## Carga de datos\n","Se procede a cargar el conjunto de datos a analizar.  \n","Este contiene la información que será estudiada, y se verificará su estructura y contenido inicial."]},{"cell_type":"code","execution_count":4,"id":"e3ee661d","metadata":{"ExecuteTime":{"end_time":"2025-10-27T02:31:59.989956Z","start_time":"2025-10-27T02:31:59.912250Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"e3ee661d","executionInfo":{"status":"ok","timestamp":1761669790120,"user_tz":300,"elapsed":41,"user":{"displayName":"Juan Pardo","userId":"02803117082760634197"}},"outputId":"f66af40d-10d4-49f9-b5a7-98a653e8b73c"},"outputs":[{"output_type":"stream","name":"stdout","text":["--- 1. No se pudo cargar DataFrame desde Postgres (conexión no establecida) ---\n","\n","Error: No se encontró 'productos.csv'.\n","\n","Error: No se encontró 'clientes.csv'.\n","\n","Error: No se encontró 'categorias.csv'.\n","\n","Error: No se encontró 'metodos_pago.csv'.\n"]}],"source":["df_postgres = None # Inicializar DataFrame para datos de Postgres\n","\n","# --- 1. DataFrame desde Postgres (si engine existe) ---\n","if engine: # Solo intentar leer de la BD si la conexión se estableció antes\n","    try:\n","        # pd.read_sql() ejecuta una consulta SQL usando el 'engine'\n","        # y devuelve el resultado como un DataFrame de pandas.\n","        df_postgres = pd.read_sql('SELECT * FROM ventas', engine)\n","        print(\"--- 1. DataFrame de Postgres (ventas) ---\")\n","        display(df_postgres.head()) # Mostrar las primeras filas\n","    except Exception as e:\n","        # Capturar errores si la tabla 'ventas' no existe o hay problemas de consulta.\n","        print(f\"Error al leer de Postgres: {e}\")\n","        df_postgres = None # Asegurar que es None si falla la lectura\n","else:\n","    print(\"--- 1. No se pudo cargar DataFrame desde Postgres (conexión no establecida) ---\")\n","\n","# --- 2. DataFrame desde CSV (productos.csv) ---\n","try:\n","    df_csv_productos = pd.read_csv('productos.csv')\n","    print(\"\\n--- 2. DataFrame de CSV (productos) ---\")\n","    display(df_csv_productos.head())\n","except FileNotFoundError:\n","     print(\"\\nError: No se encontró 'productos.csv'.\")\n","     df_csv_productos = None # Asignar None si el archivo no existe\n","except Exception as e:\n","    print(f\"\\nError al leer productos.csv: {e}\")\n","    df_csv_productos = None # Asignar None si ocurre otro error\n","\n","# --- 3. DataFrame desde CSV (clientes.csv) ---\n","try:\n","    df_csv_clientes = pd.read_csv('clientes.csv')\n","    print(\"\\n--- 3. DataFrame de CSV (clientes) ---\")\n","    display(df_csv_clientes.head())\n","except FileNotFoundError:\n","     print(\"\\nError: No se encontró 'clientes.csv'.\")\n","     df_csv_clientes = None\n","except Exception as e:\n","    print(f\"\\nError al leer clientes.csv: {e}\")\n","    df_csv_clientes = None\n","\n","# --- 4. DataFrame desde CSV (categorias.csv) --- (Añadido para completitud)\n","try:\n","    df_csv_categorias = pd.read_csv('categorias.csv')\n","    print(\"\\n--- 4. DataFrame de CSV (categorias) ---\")\n","    display(df_csv_categorias.head())\n","except FileNotFoundError:\n","     print(\"\\nError: No se encontró 'categorias.csv'.\")\n","     df_csv_categorias = None\n","except Exception as e:\n","    print(f\"\\nError al leer categorias.csv: {e}\")\n","    df_csv_categorias = None\n","\n","# --- 5. DataFrame desde CSV (metodos_pago.csv) --- (Añadido para completitud)\n","try:\n","    df_csv_metodos_pago = pd.read_csv('metodos_pago.csv')\n","    print(\"\\n--- 5. DataFrame de CSV (metodos_pago) ---\")\n","    display(df_csv_metodos_pago.head())\n","except FileNotFoundError:\n","     print(\"\\nError: No se encontró 'metodos_pago.csv'.\")\n","     df_csv_metodos_pago = None\n","except Exception as e:\n","    print(f\"\\nError al leer metodos_pago.csv: {e}\")\n","    df_csv_metodos_pago = None"]},{"cell_type":"markdown","id":"cc409fc163a15410","metadata":{"id":"cc409fc163a15410"},"source":["## Fase 3: Exploración Detallada y Filtros (Ejemplos)\n","\n","Realizamos una exploración más profunda y aplicamos filtros de ejemplo a los DataFrames cargados. 🔍"]},{"cell_type":"markdown","id":"85223caa887a9835","metadata":{"id":"85223caa887a9835"},"source":["### 3.1. Exploración y Filtros: DataFrame de Ventas (Postgres)\n","\n","Analizamos `df_postgres` si se cargó correctamente."]},{"cell_type":"code","execution_count":null,"id":"21abe5e6f3215edf","metadata":{"ExecuteTime":{"end_time":"2025-10-27T02:32:00.442856Z","start_time":"2025-10-27T02:32:00.371409Z"},"id":"21abe5e6f3215edf","outputId":"621fb572-0856-4e42-dd42-301fdec0d8a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["--- Información de df_postgres (ventas) ---\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3029 entries, 0 to 3028\n","Data columns (total 7 columns):\n"," #   Column       Non-Null Count  Dtype \n","---  ------       --------------  ----- \n"," 0   ID_Venta     3029 non-null   int64 \n"," 1   Fecha        3029 non-null   object\n"," 2   ID_Cliente   3029 non-null   int64 \n"," 3   ID_Producto  3029 non-null   int64 \n"," 4   Cantidad     3029 non-null   int64 \n"," 5   Método_Pago  3029 non-null   int64 \n"," 6   Estado       3029 non-null   object\n","dtypes: int64(5), object(2)\n","memory usage: 165.8+ KB\n","\n","--- Filtros de Ejemplo para Ventas ---\n","\n","Se encontraron 496 ventas con Cantidad > 5\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID_Venta</th>\n","      <th>Fecha</th>\n","      <th>ID_Cliente</th>\n","      <th>ID_Producto</th>\n","      <th>Cantidad</th>\n","      <th>Método_Pago</th>\n","      <th>Estado</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>2578</td>\n","      <td>31/1/2024</td>\n","      <td>201</td>\n","      <td>31</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>492</td>\n","      <td>01/02/2024</td>\n","      <td>114</td>\n","      <td>29</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1565</td>\n","      <td>1/2/2024</td>\n","      <td>97</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>272</td>\n","      <td>02/02/2024</td>\n","      <td>60</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>1595</td>\n","      <td>2/2/2024</td>\n","      <td>129</td>\n","      <td>31</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>Completa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    ID_Venta       Fecha  ID_Cliente  ID_Producto  Cantidad  Método_Pago  \\\n","6       2578   31/1/2024         201           31         6            3   \n","8        492  01/02/2024         114           29         6            4   \n","11      1565    1/2/2024          97            6         6            2   \n","16       272  02/02/2024          60            3         6            4   \n","21      1595    2/2/2024         129           31         6            1   \n","\n","      Estado  \n","6   Completa  \n","8   Completa  \n","11  Completa  \n","16  Completa  \n","21  Completa  "]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Se encontraron 7 ventas del cliente ID 10\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID_Venta</th>\n","      <th>Fecha</th>\n","      <th>ID_Cliente</th>\n","      <th>ID_Producto</th>\n","      <th>Cantidad</th>\n","      <th>Método_Pago</th>\n","      <th>Estado</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>919</td>\n","      <td>31/01/2024</td>\n","      <td>10</td>\n","      <td>25</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>1473</th>\n","      <td>798</td>\n","      <td>09/07/2024</td>\n","      <td>10</td>\n","      <td>24</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>1474</th>\n","      <td>1103</td>\n","      <td>9/7/2024</td>\n","      <td>10</td>\n","      <td>34</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>Completa</td>\n","    </tr>\n","    <tr>\n","      <th>2305</th>\n","      <td>2776</td>\n","      <td>10/10/2024</td>\n","      <td>10</td>\n","      <td>33</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>Pendiente</td>\n","    </tr>\n","    <tr>\n","      <th>2730</th>\n","      <td>2797</td>\n","      <td>25/11/2024</td>\n","      <td>10</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>Completa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      ID_Venta       Fecha  ID_Cliente  ID_Producto  Cantidad  Método_Pago  \\\n","0          919  31/01/2024          10           25         5            1   \n","1473       798  09/07/2024          10           24         5            4   \n","1474      1103    9/7/2024          10           34         6            5   \n","2305      2776  10/10/2024          10           33         3            3   \n","2730      2797  25/11/2024          10           17         2            4   \n","\n","         Estado  \n","0      Completa  \n","1473   Completa  \n","1474   Completa  \n","2305  Pendiente  \n","2730   Completa  "]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Se encontraron 2472 ventas que NO usaron el método de pago ID 1\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID_Venta</th>\n","      <th>Fecha</th>\n","      <th>ID_Cliente</th>\n","      <th>ID_Producto</th>\n","      <th>Cantidad</th>\n","      <th>Método_Pago</th>\n","      <th>Estado</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>947</td>\n","      <td>31/01/2